---
# - cppcoreguidelines-owning-memory is disabled because googletest uses new in
#   its TEST macro to create testing::internal::TestFactoryImp.
#
# - cppcoreguidelines-pro-bounds-* checks are disabled since they in many cases
#   suggest using the GSL. Should be alternatives in language/standard library.
#   They also behave weirdly in some cases. See e.g.
#   https://llvm.org/bugs/show_bug.cgi?id=31419 . Disable them until better
#   alternatives are available and the checks are better. (Also often the case
#   that e.g. array indexing with non constant is done in performance critical
#   code where bounds checking is not wanted. Input can be validated before
#   indexing. With an assert(), if nothing else, that is disabled in release.)
#
# - cppcoreguidelines-pro-type-cstyle-cast is disabled due to it emitting
#   warnings for GTK+/GObject cast macros even if all Glib and GTK+ headers
#   are marked as system headers (with -isystem and/or C/CPLUS_INCLUDE_PATH).
#   -Wold-style-cast in GCC/Clang catches C-style casts though and actually
#   recognizes -isystem and C/CPLUS_INCLUDE_PATH. See
#   https://bugs.llvm.org/show_bug.cgi?id=29089 .
#
# - cppcoreguidelines-pro-type-member-init is disabled because there are too
#   many false positives. See:
#   https://llvm.org/bugs/show_bug.cgi?id=31039
#   https://llvm.org/bugs/show_bug.cgi?id=31420
#
# - cppcoreguidelines-pro-type-vararg is disabled because it reports false
#   positives in googletest. See https://llvm.org/bugs/show_bug.cgi?id=31194 .
#
# - cppcoreguidelines-special-member-functions is disabled because violations
#   in googletest macros. E.g. each TEST(..) emits warning.
#
# - misc-suspicious-semicolon is broken with "if constexpr" in templates. See
#   https://bugs.llvm.org/show_bug.cgi?id=35824 .
#
# - modernize-pass-by-value is disabled because it causes many "false" warnings
#   and I have never really liked the recommendation in general. It is too
#   broad. It also seems like the C++ community has swung around a bit on this
#   in later years. See for instance Effective Modern C++ by Scott Meyers.
#
# - modernize-raw-string-literal is disabled because it is too agressive. See
#   https://llvm.org/bugs/show_bug.cgi?id=30964
#
# - modernize-use-equals-delete is disabled because Google Test does not use
#   = delete. Filed https://github.com/google/googletest/issues/1072 for at
#   least adding NOLINT.

Checks: "\
bugprone-*,\
cppcoreguidelines-*,\
-cppcoreguidelines-owning-memory,\
-cppcoreguidelines-pro-bounds-*,\
-cppcoreguidelines-pro-type-cstyle-cast,\
-cppcoreguidelines-pro-type-member-init,\
-cppcoreguidelines-pro-type-vararg,\
-cppcoreguidelines-special-member-functions,\
google-build-namespaces,\
google-build-using-namespace,\
google-default-arguments,\
google-explicit-constructor,\
google-global-names-in-headers,\
google-readability-casting,\
misc-*,\
-misc-suspicious-semicolon,\
modernize-*,\
-modernize-pass-by-value,\
-modernize-raw-string-literal,\
-modernize-use-equals-delete,\
performance-*,\
readability-*,\
"

HeaderFilterRegex: '^src/'

CheckOptions:
  - key:   cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: '1'
  - key:   modernize-loop-convert.NamingStyle
    value: lower_case
  - key:   modernize-use-default-member-init.UseAssignment
    value: 1
  - key:   readability-braces-around-statements.ShortStatementLines
    value: '8'
  - key:   readability-function-size.LineThreshold
    value: '64'
  - key:   readability-function-size.ParameterThreshold
    value: '8'
  - key:   readability-identifier-naming.AbstractClassCase
    value: CamelCase
  - key:   readability-identifier-naming.ClassCase
    value: CamelCase
  - key:   readability-identifier-naming.ClassConstantCase
    value: UPPER_CASE
  - key:   readability-identifier-naming.ClassMemberCase
    value: lower_case
  - key:   readability-identifier-naming.ClassMethodCase
    value: lower_case
  - key:   readability-identifier-naming.ConstantCase
    value: UPPER_CASE
  - key:   readability-identifier-naming.ConstantMemberCase
    value: lower_case
  - key:   readability-identifier-naming.ConstantMemberSuffix
    value: '_'
  - key:   readability-identifier-naming.ConstantParameterCase
    value: lower_case
  - key:   readability-identifier-naming.ConstexprFunctionCase
    value: lower_case
  - key:   readability-identifier-naming.ConstexprMethodCase
    value: lower_case
  - key:   readability-identifier-naming.ConstexprVariableCase
    value: UPPER_CASE
  - key:   readability-identifier-naming.EnumCase
    value: CamelCase
  - key:   readability-identifier-naming.EnumConstantCase
    value: UPPER_CASE
  - key:   readability-identifier-naming.FunctionCase
    value: lower_case
  - key:   readability-identifier-naming.GlobalConstantCase
    value: UPPER_CASE
  - key:   readability-identifier-naming.GlobalFunctionCase
    value: lower_case
  - key:   readability-identifier-naming.GlobalVariableCase
    value: lower_case
  - key:   readability-identifier-naming.LocalConstantCase
    value: lower_case
  - key:   readability-identifier-naming.LocalVariableCase
    value: lower_case
  - key:   readability-identifier-naming.MemberCase
    value: lower_case
  - key:   readability-identifier-naming.MethodCase
    value: lower_case
  - key:   readability-identifier-naming.NamespaceCase
    value: CamelCase
  - key:   readability-identifier-naming.ParameterCase
    value: lower_case
  - key:   readability-identifier-naming.ParameterPackCase
    value: lower_case
  - key:   readability-identifier-naming.PrivateMemberCase
    value: lower_case
  - key:   readability-identifier-naming.PrivateMemberSuffix
    value: '_'
  - key:   readability-identifier-naming.PrivateMethodCase
    value: lower_case
  - key:   readability-identifier-naming.ProtectedMemberCase
    value: lower_case
  - key:   readability-identifier-naming.ProtectedMemberSuffix
    value: '_'
  - key:   readability-identifier-naming.ProtectedMethodCase
    value: lower_case
  - key:   readability-identifier-naming.PublicMemberCase
    value: lower_case
  - key:   readability-identifier-naming.PublicMethodCase
    value: lower_case
  - key:   readability-identifier-naming.StaticConstantCase
    value: lower_case
  - key:   readability-identifier-naming.StaticVariableCase
    value: lower_case
  - key:   readability-identifier-naming.StructCase
    value: CamelCase
  - key:   readability-identifier-naming.TemplateParameterCase
    value: CamelCase
  - key:   readability-identifier-naming.TemplateTemplateParameterCase
    value: CamelCase
  - key:   readability-identifier-naming.TypeTemplateParameterCase
    value: CamelCase
  - key:   readability-identifier-naming.TypedefCase
    value: CamelCase
  - key:   readability-identifier-naming.UnionCase
    value: CamelCase
  - key:   readability-identifier-naming.ValueTemplateParameterCase
    value: UPPER_CASE
  - key:   readability-identifier-naming.VariableCase
    value: lower_case
  - key:   readability-identifier-naming.VirtualMethodCase
    value: lower_case
  - key:   readability-implicit-bool-conversion.AllowIntegerConditions
    value: '1'
  - key:   readability-implicit-bool-conversion.AllowPointerConditions
    value: '1'
...

